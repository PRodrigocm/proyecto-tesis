generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Modalidad {
  idModalidad Int    @id @default(autoincrement()) @map("id_modalidad")
  nombre      String @unique
  ies         Ie[]

  @@map("modalidad")
}

model Ie {
  idIe              Int                 @id @default(autoincrement()) @map("id_ie")
  nombre            String              @unique
  codigoIe          String              @unique @map("codigo_ie") @db.VarChar(10)
  idModalidad       Int                 @map("id_modalidad")
  createdAt         DateTime            @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt         DateTime?           @updatedAt @map("updated_at") @db.Timestamptz(6)
  direccion         String?
  email             String?
  telefono          String?
  asistenciasIE     AsistenciaIE[]
  calendarioEscolar CalendarioEscolar[]
  estudiantes       Estudiante[]
  modalidad         Modalidad           @relation(fields: [idModalidad], references: [idModalidad])
  justificaciones   Justificacion[]
  niveles           Nivel[]
  retiros           Retiro[]
  usuarios          Usuario[]
  reuniones         Reunion[]

  @@map("ie")
}

model Nivel {
  idNivel Int     @id @default(autoincrement()) @map("id_nivel")
  idIe    Int     @map("id_ie")
  nombre  String
  grados  Grado[]
  ie      Ie      @relation(fields: [idIe], references: [idIe])

  @@unique([idIe, nombre], name: "uq_nivel_ie_nombre")
  @@map("nivel")
}

model Grado {
  idGrado        Int            @id @default(autoincrement()) @map("id_grado")
  idNivel        Int            @map("id_nivel")
  nombre         String
  nivel          Nivel          @relation(fields: [idNivel], references: [idNivel])
  gradoSecciones GradoSeccion[]
  reuniones      Reunion[]      @relation("ReunionGrados")

  @@unique([idNivel, nombre], name: "uq_grado_nivel_nombre")
  @@map("grado")
}

model Seccion {
  idSeccion      Int            @id @default(autoincrement()) @map("id_seccion")
  nombre         String         @unique
  gradoSecciones GradoSeccion[]
  reuniones      Reunion[]      @relation("ReunionSecciones")

  @@map("seccion")
}

model GradoSeccion {
  idGradoSeccion Int            @id @default(autoincrement()) @map("id_grado_seccion")
  idGrado        Int            @map("id_grado")
  idSeccion      Int            @map("id_seccion")
  docenteAulas   DocenteAula[]
  estudiantes    Estudiante[]
  grado          Grado          @relation(fields: [idGrado], references: [idGrado])
  seccion        Seccion        @relation(fields: [idSeccion], references: [idSeccion])
  horariosClase  HorarioClase[]
  retiros        Retiro[]

  @@unique([idGrado, idSeccion], name: "uq_grado_seccion")
  @@map("grado_seccion")
}

model Usuario {
  idUsuario                  Int                         @id @default(autoincrement()) @map("id_usuario")
  nombre                     String?
  apellido                   String?
  dni                        String                      @unique
  email                      String?
  telefono                   String?
  passwordHash               String?                     @map("password_hash")
  estado                     String?
  idIe                       Int?                        @map("id_ie")
  createdAt                  DateTime                    @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt                  DateTime?                   @updatedAt @map("updated_at") @db.Timestamptz(6)
  apoderado                  Apoderado?
  asistenciasRegistradas     Asistencia[]                @relation("RegistradoPor")
  asistenciasIEIngreso       AsistenciaIE[]              @relation("IngresoRegistradoPor")
  asistenciasIESalida        AsistenciaIE[]              @relation("SalidaRegistradaPor")
  justificacionesAplicadas   AsistenciaJustificacion[]   @relation("JustificacionAplicadaPor")
  docente                    Docente?
  documentosSubidos          DocumentoJustificacion[]    @relation("DocumentoSubidoPor")
  estudiante                 Estudiante?
  historicoEstados           HistoricoEstadoAsistencia[]
  justificacionesPresentadas Justificacion[]             @relation("JustificacionPresentadaPor")
  justificacionesRevisadas   Justificacion[]             @relation("JustificacionRevisadaPor")
  notificaciones             Notificacion[]
  retirosVerificados         Retiro[]                    @relation("VerificadoPor")
  roles                      UsuarioRol[]
  ie                         Ie?                         @relation(fields: [idIe], references: [idIe])

  @@map("usuarios")
}

model Rol {
  idRol    Int          @id @default(autoincrement()) @map("id_rol")
  nombre   String       @unique
  usuarios UsuarioRol[]

  @@map("roles")
}

model UsuarioRol {
  idUsuario Int     @map("id_usuario")
  idRol     Int     @map("id_rol")
  rol       Rol     @relation(fields: [idRol], references: [idRol])
  usuario   Usuario @relation(fields: [idUsuario], references: [idUsuario])

  @@id([idUsuario, idRol])
  @@map("usuario_rol")
}

model Estudiante {
  idEstudiante         Int                   @id @default(autoincrement()) @map("id_estudiante")
  idUsuario            Int                   @unique @map("id_usuario")
  idIe                 Int?                  @map("id_ie")
  idGradoSeccion       Int?                  @map("id_grado_seccion")
  codigoQR             String                @unique @map("codigo_qr") @db.VarChar(32)
  fechaNacimiento      DateTime?             @map("fecha_nacimiento") @db.Date
  createdAt            DateTime              @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt            DateTime?             @updatedAt @map("updated_at") @db.Timestamptz(6)
  asistencias          Asistencia[]
  asistenciasIE        AsistenciaIE[]
  autorizacionesRetiro AutorizacionRetiro[]
  gradoSeccion         GradoSeccion?         @relation(fields: [idGradoSeccion], references: [idGradoSeccion])
  ie                   Ie?                   @relation(fields: [idIe], references: [idIe])
  usuario              Usuario               @relation(fields: [idUsuario], references: [idUsuario])
  apoderados           EstudianteApoderado[]
  justificaciones      Justificacion[]
  retiros              Retiro[]

  @@map("estudiante")
}

model Apoderado {
  idApoderado          Int                   @id @default(autoincrement()) @map("id_apoderado")
  idUsuario            Int                   @unique @map("id_usuario")
  codigo               String?               @unique @db.VarChar(32)
  ocupacion            String?
  createdAt            DateTime              @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt            DateTime?             @updatedAt @map("updated_at") @db.Timestamptz(6)
  direccion            String?
  usuario              Usuario               @relation(fields: [idUsuario], references: [idUsuario])
  autorizacionesRetiro AutorizacionRetiro[]
  estudiantes          EstudianteApoderado[]
  retirosContactados   Retiro[]              @relation("ApoderadoContactado")
  retirosRealizados    Retiro[]              @relation("ApoderadoQueRetira")

  @@map("apoderado")
}

model Docente {
  idDocente         Int            @id @default(autoincrement()) @map("id_docente")
  idUsuario         Int            @unique @map("id_usuario")
  codigo            String?        @unique @db.VarChar(32)
  especialidad      String?
  createdAt         DateTime       @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt         DateTime?      @updatedAt @map("updated_at") @db.Timestamptz(6)
  usuario           Usuario        @relation(fields: [idUsuario], references: [idUsuario])
  docenteAulas      DocenteAula[]
  horariosClase     HorarioClase[]
  retirosReportados Retiro[]       @relation("ReportadoPorDocente")

  @@map("docente")
}

model EstudianteApoderado {
  idEstudiante Int        @map("id_estudiante")
  idApoderado  Int        @map("id_apoderado")
  relacion     String
  esTitular    Boolean    @default(false) @map("es_titular")
  puedeRetirar Boolean    @default(true) @map("puede_retirar")
  apoderado    Apoderado  @relation(fields: [idApoderado], references: [idApoderado])
  estudiante   Estudiante @relation(fields: [idEstudiante], references: [idEstudiante])

  @@id([idEstudiante, idApoderado])
  @@map("estudiante_apoderado")
}

model TipoAsignacion {
  idTipoAsignacion Int           @id @default(autoincrement()) @map("id_tipo_asignacion")
  nombre           String        @unique
  docenteAulas     DocenteAula[]

  @@map("tipos_asignacion")
}

model DocenteAula {
  idDocenteAula    Int            @id @default(autoincrement()) @map("id_docente_aula")
  idDocente        Int            @map("id_docente")
  idGradoSeccion   Int            @map("id_grado_seccion")
  idTipoAsignacion Int            @map("id_tipo_asignacion")
  createdAt        DateTime       @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt        DateTime?      @updatedAt @map("updated_at") @db.Timestamptz(6)
  docente          Docente        @relation(fields: [idDocente], references: [idDocente])
  gradoSeccion     GradoSeccion   @relation(fields: [idGradoSeccion], references: [idGradoSeccion])
  tipoAsignacion   TipoAsignacion @relation(fields: [idTipoAsignacion], references: [idTipoAsignacion])

  @@unique([idDocente, idGradoSeccion, idTipoAsignacion], name: "uq_docente_aula_tipo")
  @@map("docente_aula")
}

model CalendarioEscolar {
  idCalendario Int      @id @default(autoincrement()) @map("id_calendario")
  idIe         Int      @map("id_ie")
  fechaInicio  DateTime @map("fecha_inicio") @db.Date
  fechaFin     DateTime @map("fecha_fin") @db.Date
  tipoDia      String   @map("tipo_dia") // CLASES, FERIADO, VACACIONES, EVENTO
  descripcion  String?
  creadoEn     DateTime @default(now()) @map("creado_en") @db.Timestamptz(6)
  ie           Ie       @relation(fields: [idIe], references: [idIe])

  @@index([idIe, fechaInicio])
  @@index([tipoDia])
  @@map("calendario_escolar")
}


model HorarioClase {
  idHorarioClase Int                @id @default(autoincrement()) @map("id_horario_clase")
  idGradoSeccion Int                @map("id_grado_seccion")
  idDocente      Int?               @map("id_docente")
  materia        String?
  diaSemana      Int                @map("dia_semana")
  horaInicio     DateTime           @map("hora_inicio") @db.Time(6)
  horaFin        DateTime           @map("hora_fin") @db.Time(6)
  aula           String?
  activo         Boolean            @default(true)
  createdAt      DateTime           @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt      DateTime?          @updatedAt @map("updated_at") @db.Timestamptz(6)
  sesiones       Int                @default(1)
  tipoActividad  TipoActividadEnum  @default(CLASE_REGULAR) @map("tipo_actividad")
  toleranciaMin  Int                @default(10) @map("tolerancia_min")
  asistencias    Asistencia[]
  docente        Docente?           @relation(fields: [idDocente], references: [idDocente])
  gradoSeccion   GradoSeccion       @relation(fields: [idGradoSeccion], references: [idGradoSeccion])

  @@unique([idGradoSeccion, diaSemana, horaInicio], name: "uq_hc_grado_dia_hora")
  @@map("horarios_clase")
}




model EstadoAsistencia {
  idEstadoAsistencia    Int                         @id @default(autoincrement()) @map("id_estado_asistencia")
  nombreEstado          String                      @unique @map("nombre_estado")
  activo                Boolean                     @default(true)
  afectaAsistencia      Boolean                     @default(true) @map("afecta_asistencia")
  codigo                String                      @unique
  requiereJustificacion Boolean                     @default(false) @map("requiere_justificacion")
  asistencias           Asistencia[]
  historicoEstados      HistoricoEstadoAsistencia[]
  justificaciones       Justificacion[]

  @@map("estados_asistencia")
}

model TipoJustificacion {
  idTipoJustificacion Int             @id @default(autoincrement()) @map("id_tipo_justificacion")
  nombre              String          @unique
  codigo              String          @unique
  requiereDocumento   Boolean         @default(false) @map("requiere_documento")
  diasMaximos         Int?            @map("dias_maximos")
  activo              Boolean         @default(true)
  justificaciones     Justificacion[]

  @@map("tipos_justificacion")
}

model EstadoJustificacion {
  idEstadoJustificacion Int             @id @default(autoincrement()) @map("id_estado_justificacion")
  nombre                String          @unique
  codigo                String          @unique
  esFinal               Boolean         @default(false) @map("es_final")
  activo                Boolean         @default(true)
  justificaciones       Justificacion[]

  @@map("estados_justificacion")
}

model Justificacion {
  idJustificacion       Int                       @id @default(autoincrement()) @map("id_justificacion")
  idEstudiante          Int                       @map("id_estudiante")
  idIe                  Int                       @map("id_ie")
  idTipoJustificacion   Int                       @map("id_tipo_justificacion")
  idEstadoJustificacion Int                       @map("id_estado_justificacion")
  idEstadoAsistencia    Int?                      @map("id_estado_asistencia")
  fechaInicio           DateTime                  @map("fecha_inicio") @db.Date
  fechaFin              DateTime                  @map("fecha_fin") @db.Date
  motivo                String
  observaciones         String?
  fechaPresentacion     DateTime                  @default(now()) @map("fecha_presentacion") @db.Timestamptz(6)
  presentadoPor         Int?                      @map("presentado_por")
  revisadoPor           Int?                      @map("revisado_por")
  fechaRevision         DateTime?                 @map("fecha_revision") @db.Timestamptz(6)
  observacionesRevision String?                   @map("observaciones_revision")
  createdAt             DateTime                  @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt             DateTime?                 @updatedAt @map("updated_at") @db.Timestamptz(6)
  asistenciasAfectadas  AsistenciaJustificacion[]
  documentos            DocumentoJustificacion[]
  estadoAsistencia      EstadoAsistencia?         @relation(fields: [idEstadoAsistencia], references: [idEstadoAsistencia])
  estadoJustificacion   EstadoJustificacion       @relation(fields: [idEstadoJustificacion], references: [idEstadoJustificacion])
  estudiante            Estudiante                @relation(fields: [idEstudiante], references: [idEstudiante])
  ie                    Ie                        @relation(fields: [idIe], references: [idIe])
  tipoJustificacion     TipoJustificacion         @relation(fields: [idTipoJustificacion], references: [idTipoJustificacion])
  usuarioPresentador    Usuario?                  @relation("JustificacionPresentadaPor", fields: [presentadoPor], references: [idUsuario])
  usuarioRevisor        Usuario?                  @relation("JustificacionRevisadaPor", fields: [revisadoPor], references: [idUsuario])

  @@index([idEstudiante, fechaInicio, fechaFin])
  @@index([idIe, fechaPresentacion])
  @@index([idEstadoJustificacion])
  @@map("justificaciones")
}

model DocumentoJustificacion {
  idDocumento     Int           @id @default(autoincrement()) @map("id_documento")
  idJustificacion Int           @map("id_justificacion")
  nombreArchivo   String        @map("nombre_archivo")
  rutaArchivo     String        @map("ruta_archivo")
  tipoArchivo     String        @map("tipo_archivo")
  tamanioBytes    Int           @map("tamanio_bytes")
  descripcion     String?
  subidoPor       Int?          @map("subido_por")
  createdAt       DateTime      @default(now()) @map("created_at") @db.Timestamptz(6)
  justificacion   Justificacion @relation(fields: [idJustificacion], references: [idJustificacion])
  usuarioSubidor  Usuario?      @relation("DocumentoSubidoPor", fields: [subidoPor], references: [idUsuario])

  @@map("documentos_justificacion")
}

model AsistenciaJustificacion {
  idAsistencia     Int           @map("id_asistencia")
  idJustificacion  Int           @map("id_justificacion")
  fechaAplicacion  DateTime      @default(now()) @map("fecha_aplicacion") @db.Timestamptz(6)
  aplicadoPor      Int?          @map("aplicado_por")
  usuarioAplicador Usuario?      @relation("JustificacionAplicadaPor", fields: [aplicadoPor], references: [idUsuario])
  asistencia       Asistencia    @relation(fields: [idAsistencia], references: [idAsistencia])
  justificacion    Justificacion @relation(fields: [idJustificacion], references: [idJustificacion])

  @@id([idAsistencia, idJustificacion])
  @@map("asistencias_justificaciones")
}

model Asistencia {
  idAsistencia             Int                         @id @default(autoincrement()) @map("id_asistencia")
  idEstudiante             Int                         @map("id_estudiante")
  idHorarioClase           Int?                        @map("id_horario_clase")
  fecha                    DateTime                    @db.Date
  idEstadoAsistencia       Int?                        @map("id_estado_asistencia")
  horaRegistro             DateTime?                   @map("hora_registro") @db.Timestamptz(6)
  registradoPor            Int?                        @map("registrado_por")
  observaciones            String?
  createdAt                DateTime                    @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt                DateTime?                   @updatedAt @map("updated_at") @db.Timestamptz(6)
  estadoAsistencia         EstadoAsistencia?           @relation(fields: [idEstadoAsistencia], references: [idEstadoAsistencia])
  estudiante               Estudiante                  @relation(fields: [idEstudiante], references: [idEstudiante])
  horarioClase             HorarioClase?               @relation(fields: [idHorarioClase], references: [idHorarioClase])
  usuarioRegistrador       Usuario?                    @relation("RegistradoPor", fields: [registradoPor], references: [idUsuario])
  justificacionesAfectadas AsistenciaJustificacion[]
  historicoEstados         HistoricoEstadoAsistencia[]

  @@unique([idEstudiante, idHorarioClase, fecha], name: "uq_asistencia_est_horario_fecha")
  @@index([fecha])
  @@index([idHorarioClase, fecha])
  @@map("asistencias")
}

model AsistenciaIE {
  idAsistenciaIE       Int       @id @default(autoincrement()) @map("id_asistencia_ie")
  idEstudiante         Int       @map("id_estudiante")
  idIe                 Int       @map("id_ie")
  fecha                DateTime  @db.Date
  horaIngreso          DateTime? @map("hora_ingreso") @db.Timestamptz(6)
  horaSalida           DateTime? @map("hora_salida") @db.Timestamptz(6)
  estado               String?   // INGRESADO, EN_CLASE, RETIRADO
  registradoIngresoPor Int?      @map("registrado_ingreso_por")
  registradoSalidaPor  Int?      @map("registrado_salida_por")
  createdAt            DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt            DateTime? @updatedAt @map("updated_at") @db.Timestamptz(6)

  estudiante     Estudiante @relation(fields: [idEstudiante], references: [idEstudiante])
  ie             Ie         @relation(fields: [idIe], references: [idIe])
  usuarioIngreso Usuario?   @relation("IngresoRegistradoPor", fields: [registradoIngresoPor], references: [idUsuario])
  usuarioSalida  Usuario?   @relation("SalidaRegistradaPor", fields: [registradoSalidaPor], references: [idUsuario])

  @@unique([idEstudiante, fecha], name: "uq_asistencia_ie_estudiante_fecha")
  @@index([idIe, fecha])
  @@map("asistencia_ie")
}

model HistoricoEstadoAsistencia {
  idHistorico        Int              @id @default(autoincrement()) @map("id_historico")
  idAsistencia       Int              @map("id_asistencia")
  idEstadoAsistencia Int              @map("id_estado_asistencia")
  fechaCambio        DateTime         @default(now()) @map("fecha_cambio") @db.Timestamptz(6)
  cambiadoPor        Int?             @map("cambiado_por")
  usuario            Usuario?         @relation(fields: [cambiadoPor], references: [idUsuario])
  asistencia         Asistencia       @relation(fields: [idAsistencia], references: [idAsistencia])
  estadoAsistencia   EstadoAsistencia @relation(fields: [idEstadoAsistencia], references: [idEstadoAsistencia])

  @@map("historico_estados_asistencia")
}

model TipoRetiro {
  idTipoRetiro Int      @id @default(autoincrement()) @map("id_tipo_retiro")
  nombre       String   @unique
  retiros      Retiro[]

  @@map("tipo_retiro")
}

model EstadoRetiro {
  idEstadoRetiro Int      @id @default(autoincrement()) @map("id_estado_retiro")
  codigo         String   @unique
  nombre         String
  orden          Int      @default(1)
  esFinal        Boolean  @default(false) @map("es_final")
  createdAt      DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  retiros        Retiro[]

  @@map("estados_retiro")
}

model AutorizacionRetiro {
  idAut        Int        @id @default(autoincrement()) @map("id_aut")
  idEstudiante Int        @map("id_estudiante")
  idApoderado  Int        @map("id_apoderado")
  vigenteDesde DateTime?  @map("vigente_desde") @db.Date
  vigenteHasta DateTime?  @map("vigente_hasta") @db.Date
  observacion  String?
  apoderado    Apoderado  @relation(fields: [idApoderado], references: [idApoderado])
  estudiante   Estudiante @relation(fields: [idEstudiante], references: [idEstudiante])

  @@index([idEstudiante, idApoderado, vigenteDesde])
  @@map("autorizaciones_retiro")
}

model Retiro {
  idRetiro            Int           @id @default(autoincrement()) @map("id_retiro")
  idEstudiante        Int           @map("id_estudiante")
  idIe                Int           @map("id_ie")
  idGradoSeccion      Int?          @map("id_grado_seccion")
  fecha               DateTime      @db.Date
  hora                DateTime      @db.Time(6)
  idTipoRetiro        Int?          @map("id_tipo_retiro")
  origen              String?
  reportadoPorDocente Int?          @map("reportado_por_docente")
  apoderadoContactado Int?          @map("apoderado_contactado")
  horaContacto        DateTime?     @map("hora_contacto") @db.Timestamptz(6)
  medioContacto       String?       @map("medio_contacto")
  apoderadoQueRetira  Int?          @map("apoderado_que_retira")
  dniVerificado       String?       @map("dni_verificado")
  verificadoPor       Int?          @map("verificado_por")
  idEstadoRetiro      Int?          @map("id_estado_retiro")
  observaciones       String?
  createdAt           DateTime      @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt           DateTime?     @updatedAt @map("updated_at") @db.Timestamptz(6)
  apoderadoContacto   Apoderado?    @relation("ApoderadoContactado", fields: [apoderadoContactado], references: [idApoderado])
  apoderadoRetira     Apoderado?    @relation("ApoderadoQueRetira", fields: [apoderadoQueRetira], references: [idApoderado])
  estadoRetiro        EstadoRetiro? @relation(fields: [idEstadoRetiro], references: [idEstadoRetiro])
  estudiante          Estudiante    @relation(fields: [idEstudiante], references: [idEstudiante])
  gradoSeccion        GradoSeccion? @relation(fields: [idGradoSeccion], references: [idGradoSeccion])
  ie                  Ie            @relation(fields: [idIe], references: [idIe])
  tipoRetiro          TipoRetiro?   @relation(fields: [idTipoRetiro], references: [idTipoRetiro])
  docenteReportador   Docente?      @relation("ReportadoPorDocente", fields: [reportadoPorDocente], references: [idDocente])
  usuarioVerificador  Usuario?      @relation("VerificadoPor", fields: [verificadoPor], references: [idUsuario])

  @@index([idEstudiante, fecha])
  @@index([idIe, fecha])
  @@index([idEstadoRetiro])
  @@map("retiros")
}

model Notificacion {
  idNotificacion Int       @id @default(autoincrement()) @map("id_notificacion")
  idUsuario      Int       @map("id_usuario")
  titulo         String
  mensaje        String
  tipo           String
  leida          Boolean   @default(false)
  fechaEnvio     DateTime  @default(now()) @map("fecha_envio") @db.Timestamptz(6)
  fechaLectura   DateTime? @map("fecha_lectura") @db.Timestamptz(6)
  origen         String?
  usuario        Usuario   @relation(fields: [idUsuario], references: [idUsuario])

  @@index([idUsuario, leida])
  @@map("notificaciones")
}

enum TipoActividadEnum {
  CLASE_REGULAR
  REFORZAMIENTO
  RECUPERACION
  EVALUACION

  @@map("tipo_actividad")
}

enum TipoReunionEnum {
  GENERAL
  ENTREGA_LIBRETAS
  ASAMBLEA_PADRES
  TUTORIAL
  EMERGENCIA
  OTRO

  @@map("tipo_reunion")
}

model Reunion {
  idReunion     Int                @id @default(autoincrement()) @map("id_reunion")
  idIe          Int                @map("id_ie")
  titulo        String
  descripcion   String?
  fecha         DateTime           @db.Timestamptz(6)
  horaInicio    DateTime           @map("hora_inicio") @db.Time(6)
  horaFin       DateTime           @map("hora_fin") @db.Time(6)
  tipo          TipoReunionEnum    @default(GENERAL)
  createdAt     DateTime           @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt     DateTime?          @updatedAt @map("updated_at") @db.Timestamptz(6)

  // Relaciones
  ie            Ie                 @relation(fields: [idIe], references: [idIe])
  grados        Grado[]            @relation("ReunionGrados")
  secciones     Seccion[]          @relation("ReunionSecciones")

  @@map("reunion")
}
