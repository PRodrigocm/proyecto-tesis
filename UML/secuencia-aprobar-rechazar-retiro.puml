@startuml
!theme plain
title Secuencia: Aprobación/Rechazo de Retiro por Apoderado Titular

participant "Apoderado\nTitular" as A
participant "Frontend\n(Next.js)" as F
participant "API Routes" as API
participant "Auth Middleware" as Auth
participant "Business Logic" as BL
participant "Prisma ORM" as P
participant "PostgreSQL" as DB
participant "Notification\nService" as NS
participant "Email/SMS\nProvider" as ESP

== Proceso de Aprobación/Rechazo ==

A -> F: Selecciona acción en un retiro (Aprobar/Rechazar)

alt Aprobar Retiro
    F -> API: PUT /api/apoderados/retiros/{id}/aprobar
    API -> Auth: Verificar token JWT y permisos
    Auth -> API: Autorizado para aprobar
    API -> BL: Procesar aprobación
    BL -> P: Verificar estado actual del retiro
    P -> DB: SELECT estado FROM retiros WHERE id = ?
    
    alt Estado válido para aprobación
        DB -> P: Estado: SOLICITADO
        P -> BL: Estado válido para aprobación
        BL -> P: Actualizar estado del retiro
        P -> DB: UPDATE retiros SET estado = 'APROBADO', fecha_aprobacion = NOW(), aprobado_por = ?
        DB -> P: Retiro actualizado
        P -> BL: Actualización exitosa
        
        == Notificación a Auxiliares ==
        
        BL -> NS: Notificar aprobación a auxiliares
        NS -> P: Obtener lista de auxiliares
        P -> DB: SELECT usuarios WHERE rol = 'AUXILIAR' AND activo = true
        DB -> P: Lista de auxiliares
        P -> NS: Datos de auxiliares
        NS -> ESP: Enviar notificaciones múltiples
        note right: "Retiro aprobado para [Estudiante]\nFecha: [Fecha] Hora: [Hora]\nMotivo: [Motivo]"
        ESP -> NS: Notificaciones enviadas
        NS -> BL: Proceso completado
        
        BL -> API: Retiro aprobado exitosamente
        API -> F: Response 200 con confirmación
        F -> A: Muestra mensaje de aprobación exitosa
        
    else Estado no válido
        DB -> P: Estado no permite aprobación
        P -> BL: Error - Estado inválido
        BL -> API: Error - No se puede aprobar
        API -> F: Response 400 con error
        F -> A: Muestra error de estado
    end

else Rechazar Retiro
    A -> F: Especifica motivo de rechazo
    F -> API: PUT /api/apoderados/retiros/{id}/rechazar
    API -> Auth: Verificar token JWT y permisos
    Auth -> API: Autorizado para rechazar
    API -> BL: Procesar rechazo
    BL -> P: Verificar estado actual del retiro
    P -> DB: SELECT estado FROM retiros WHERE id = ?
    
    alt Estado válido para rechazo
        DB -> P: Estado: SOLICITADO
        P -> BL: Estado válido para rechazo
        BL -> P: Actualizar estado del retiro
        P -> DB: UPDATE retiros SET estado = 'RECHAZADO', fecha_rechazo = NOW(), rechazado_por = ?, motivo_rechazo = ?
        DB -> P: Retiro rechazado
        P -> BL: Rechazo registrado
        
        == Notificación al Solicitante ==
        
        BL -> NS: Notificar rechazo al apoderado solicitante
        NS -> P: Obtener datos del apoderado solicitante
        P -> DB: SELECT apoderado WHERE id = ?
        DB -> P: Datos del solicitante
        P -> NS: Información del solicitante
        NS -> ESP: Enviar notificación de rechazo
        note right: "Su solicitud de retiro ha sido rechazada\nMotivo: [Motivo del rechazo]\nPuede presentar una nueva solicitud"
        ESP -> NS: Notificación enviada
        NS -> BL: Proceso completado
        
        BL -> API: Retiro rechazado exitosamente
        API -> F: Response 200 con confirmación
        F -> A: Muestra mensaje de rechazo exitoso
        
    else Estado no válido
        DB -> P: Estado no permite rechazo
        P -> BL: Error - Estado inválido
        BL -> API: Error - No se puede rechazar
        API -> F: Response 400 con error
        F -> A: Muestra error de estado
    end
end

alt Error de permisos
    Auth -> API: No autorizado
    API -> F: Response 403 con error
    F -> A: Muestra error de permisos
end

@enduml
